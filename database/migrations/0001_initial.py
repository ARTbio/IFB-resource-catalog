# Generated by Django 2.2.1 on 2019-10-04 13:10

import database.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Activityarea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10000)),
            ],
        ),
        migrations.CreateModel(
            name='Certificat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10000)),
            ],
        ),
        migrations.CreateModel(
            name='Credit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('laboratory', models.CharField(max_length=1000)),
                ('institute', models.CharField(max_length=1000)),
                ('adress', models.CharField(max_length=1000, null=True)),
                ('email', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ElixirCommunities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10000)),
            ],
            options={
                'verbose_name_plural': 'Elixir Communities',
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10000)),
            ],
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('email', models.CharField(max_length=1000)),
                ('link', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doi', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ToolType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10000)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.Resource')),
                ('logo', models.URLField(blank=True, null=True)),
                ('event_type', models.CharField(blank=True, max_length=1000, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=1000, null=True)),
                ('link', models.CharField(blank=True, max_length=1000, null=True)),
                ('organizer', models.CharField(blank=True, max_length=1000, null=True)),
                ('sponsors', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            bases=('database.resource',),
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.Resource')),
                ('logo', models.URLField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=1000, null=True)),
                ('affiliation', models.CharField(blank=True, max_length=1000, null=True)),
                ('website', models.CharField(blank=True, max_length=1000, null=True)),
                ('structure', models.CharField(blank=True, max_length=1000, null=True)),
                ('infrastructure_type', models.TextField(blank=True, choices=[('PROPRIETAIRE', 'Propriétaire'), ('HEBERGEE', 'Hébergée')], max_length=13, null=True)),
                ('useful_storage_capacity', models.CharField(blank=True, max_length=1000, null=True)),
                ('cpu_number', models.IntegerField(blank=True, null=True)),
                ('data_collection', models.CharField(blank=True, max_length=1000, null=True)),
                ('cpu_hour_per_year', models.CharField(blank=True, max_length=1000, null=True)),
                ('informatics_tools', models.CharField(blank=True, max_length=1000, null=True)),
                ('users_number', models.IntegerField(blank=True, null=True)),
                ('support_condition', models.TextField(blank=True, null=True)),
                ('server_description', models.TextField(blank=True, null=True)),
                ('title_project_support', models.CharField(blank=True, max_length=1000, null=True)),
                ('description_projects_help', models.TextField(blank=True, null=True)),
                ('accompanied_project', models.TextField(blank=True, null=True)),
                ('hosted_projects', models.TextField(blank=True, null=True)),
                ('publications', models.CharField(blank=True, max_length=1000, null=True)),
                ('activity_area', models.ManyToManyField(blank=True, to='database.Activityarea')),
                ('certificate', models.ManyToManyField(blank=True, to='database.Certificat')),
                ('keywords', models.ManyToManyField(blank=True, to='database.Keyword')),
                ('scientific_leader', models.ManyToManyField(blank=True, related_name='scientific_leader_of', to='database.People')),
                ('team', models.ManyToManyField(blank=True, related_name='member_of', to='database.People')),
                ('technical_leader', models.ManyToManyField(blank=True, related_name='technical_leader_of', to='database.People')),
            ],
            bases=('database.resource',),
        ),
        migrations.CreateModel(
            name='Training_material',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.Resource')),
                ('file_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('licence', models.CharField(blank=True, max_length=1000, null=True)),
                ('event_link', models.CharField(blank=True, max_length=1000, null=True)),
                ('publication_date', models.DateTimeField(blank=True)),
                ('target_audience', models.CharField(blank=True, max_length=1000, null=True)),
                ('url_file', models.URLField(blank=True, null=True)),
                ('keywords', models.ManyToManyField(blank=True, to='database.Keyword')),
            ],
            bases=('database.resource',),
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.Resource')),
                ('citations', models.CharField(blank=True, max_length=1000, null=True)),
                ('logo', models.URLField(blank=True, null=True)),
                ('access_condition', models.TextField(blank=True, null=True)),
                ('contact_support', models.CharField(blank=True, max_length=1000, null=True)),
                ('input_outils', models.CharField(blank=True, max_length=1000, null=True)),
                ('tool_license', models.CharField(blank=True, max_length=1000, null=True)),
                ('link', models.CharField(blank=True, max_length=1000, null=True)),
                ('prerequisites', models.TextField(blank=True, null=True)),
                ('operating_system', models.CharField(blank=True, max_length=1000, null=True)),
                ('downloads', models.IntegerField(blank=True, null=True)),
                ('software_version', models.IntegerField(blank=True, null=True)),
                ('annual_visits', models.IntegerField(blank=True, null=True)),
                ('unique_visits', models.IntegerField(blank=True, null=True)),
                ('keywords', models.ManyToManyField(blank=True, to='database.Keyword')),
                ('platform', models.ManyToManyField(blank=True, to='database.Platform')),
                ('tool_type', models.ManyToManyField(blank=True, to='database.ToolType')),
            ],
            bases=('database.resource',),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.Resource')),
                ('scope', models.TextField()),
                ('is_tool', models.BooleanField(default=False)),
                ('is_data', models.BooleanField(default=False)),
                ('is_training', models.BooleanField(default=False)),
                ('is_compute', models.BooleanField(default=False)),
                ('is_interoperability', models.BooleanField(default=False)),
                ('communities', models.TextField()),
                ('year_created', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1984), database.models.max_value_current_year], verbose_name='year')),
                ('maturity', models.TextField(choices=[('EMERGING', 'Emerging'), ('MATURE', 'Mature'), ('LEGACY', 'Legacy')], max_length=8)),
                ('access', models.TextField()),
                ('quality', models.TextField()),
                ('usage', models.TextField()),
                ('publication_citations_nb', models.IntegerField()),
                ('publication_coauthor_nb', models.IntegerField()),
                ('sab_user_comittee', models.TextField()),
                ('term_of_use', models.TextField()),
                ('ethics_policy', models.TextField()),
                ('funding', models.TextField()),
                ('motivation_catalog', models.BooleanField(default=False)),
                ('motivation_sdp', models.BooleanField(default=False)),
                ('motivation_support_ifb_it', models.BooleanField(default=False)),
                ('motivation_support_ifb_curation', models.BooleanField(default=False)),
                ('motivation_support_ifb_core_resource', models.BooleanField(default=False)),
                ('biotoolsID', models.CharField(blank=True, max_length=1000, null=True)),
                ('credit', models.ManyToManyField(to='database.Credit')),
                ('elixir_communities', models.ManyToManyField(blank=True, to='database.ElixirCommunities')),
                ('key_pub', models.ManyToManyField(blank=True, to='database.Publication')),
                ('toolType', models.ManyToManyField(to='database.ToolType')),
            ],
            bases=('database.resource',),
        ),
        migrations.CreateModel(
            name='Formation',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.Resource')),
                ('logo', models.URLField(blank=True, null=True)),
                ('formation_type', models.CharField(blank=True, max_length=1000, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=1000, null=True)),
                ('access_conditions', models.TextField()),
                ('link', models.CharField(blank=True, max_length=1000, null=True)),
                ('organizer', models.CharField(blank=True, max_length=1000, null=True)),
                ('sponsors', models.CharField(blank=True, max_length=1000, null=True)),
                ('number_people_trained', models.IntegerField(blank=True, null=True)),
                ('number_of_academic_participants', models.IntegerField(blank=True, null=True)),
                ('number_of_non_academic_participants', models.IntegerField(blank=True, null=True)),
                ('training_time', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('participation', models.CharField(blank=True, max_length=1000, null=True)),
                ('training_level', models.CharField(blank=True, max_length=1000, null=True)),
                ('training_operator', models.CharField(blank=True, max_length=1000, null=True)),
                ('number_of_sessions', models.IntegerField(blank=True, null=True)),
                ('recurrence', models.CharField(blank=True, max_length=1000, null=True)),
                ('satisfaction_rate', models.CharField(blank=True, max_length=1000, null=True)),
                ('keywords', models.ManyToManyField(blank=True, to='database.Keyword')),
                ('platform', models.ManyToManyField(to='database.Platform')),
            ],
            bases=('database.resource',),
        ),
        migrations.CreateModel(
            name='Database',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.Resource')),
                ('logo', models.URLField(blank=True, null=True)),
                ('access_conditions', models.TextField()),
                ('citations', models.CharField(blank=True, max_length=1000, null=True)),
                ('link_data', models.CharField(blank=True, max_length=1000, null=True)),
                ('annual_visits', models.IntegerField(blank=True, null=True)),
                ('unique_visits', models.IntegerField(blank=True, null=True)),
                ('last_update', models.DateTimeField(blank=True, null=True)),
                ('increase_last_update', models.CharField(blank=True, max_length=1000, null=True)),
                ('keywords', models.ManyToManyField(blank=True, to='database.Keyword')),
                ('platform', models.ManyToManyField(to='database.Platform')),
            ],
            bases=('database.resource',),
        ),
    ]
